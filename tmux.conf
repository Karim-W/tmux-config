# vim:ft=tmux
# tmux display things in 256 colors
set -g default-terminal "tmux-256color"
setw -g xterm-keys on
# set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'
set -g status-position bottom
set -g history-limit 20000

# automatically renumber tmux windows
set -g renumber-windows on

######################
#### General Settings ####
######################

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'
bind f command-prompt -p find-session 'switch-client -t %%'

 # set the prefix to control-a. This is more convenient than control-b
 # and 'a' is right next to Caps Lock (which I remap to control)
set -g prefix C-a

# set -g set-clipboard on

# enable mouse support for switching panes/windows
# setw -g mouse on

# make delay shorter
set -g escape-time 0
# make window/pane index start with 1
set -g base-index 1
setw -g pane-base-index 1
set-option -g focus-events on
set-option -g set-titles on

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

# set vi mode for copy mode
setw -g mode-keys vi
set -g status-keys vi

# automatically rename windows when an explicit name is not set
set-window-option -g automatic-rename on
set-option -g automatic-rename-format "#(nerdwin #{pane_current_command})"

# set the default title format
set-option -g set-titles-string "#T - #W"

# disabled activity monitoring
setw -g monitor-activity on
set -g visual-activity off

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
# setw -g aggressive-resize on

######################
#### Key Bindings ####
######################

# keep CWD when opening new window
unbind c
bind c new-window -c "#{pane_current_path}"

# tile all windows
unbind =
bind = select-layout tiled

# reload config file
bind r source-file ~/.config/tmux/tmux.conf \; display "Config Reloaded!"

# split window and fix path for tmux 1.9
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# synchronize all panes in a window
# bind y setw synchronize-panes

# pane movement shortcuts
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Resize pane shortcuts
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10

# open lazygit in a new window
bind-key g new-window -c "#{pane_current_path}" lazygit
# url view
bind U run "cut -c3- '#{TMUX_CONF}' | sh -s _urlview '#{pane_id}'"
# more settings to make copy-mode more vim-like
# unbind [
# bind [ copy-mode
# unbind p
# bind p paste-buffer
# bind -T copy-mode-vi v send -X begin-selection

# bind Enter copy-mode # enter copy mode
#
# bind -T copy-mode-vi v send -X begin-selection
# bind -T copy-mode-vi C-v send -X rectangle-toggle
# bind -T copy-mode-vi y send -X copy-selection-and-cancel
# bind -T copy-mode-vi Escape send -X cancel
# bind -T copy-mode-vi H send -X start-of-line
# bind -T copy-mode-vi L send -X end-of-line
#
# # copy to X11 clipboard
# # if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xsel -i -b"'
# # if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# # copy to Wayland clipboard
# # if -b 'command -v wl-copy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | wl-copy"'
# # copy to macOS clipboard
# if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | pbcopy"'
# # if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | reattach-to-usernamespace pbcopy"'
# # copy to Windows clipboard

# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Wayland clipboard
if -b 'command -v wl-copy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | wl-copy"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | pbcopy"'
# if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | reattach-to-usernamespace pbcopy"'
# copy to Windows clipboard
# if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | clip.exe"'
# if -b '[ -c /dev/clipboard ]' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - > /dev/clipboard"'

# -- buffers -------------------------------------------------------------------

bind b list-buffers     # list paste buffers
bind p paste-buffer -p  # paste from the top paste buffer
bind P choose-buffer    # choose which buffer to paste from




# tmux_conf_copy_to_os_clipboard=true

bind C-y run "tmux show-buffer | pbcopy "


# if-shell '[ "$(defaults read -g AppleInterfaceStyle 2>/dev/null)" = "Dark" ]' \
  'source-file "~/.config/tmux/themes/catppuccin/mocha.conf"' \
  'source-file "~/.config/tmux/themes/catppuccin/latte.conf"'
source-file "~/.config/tmux/themes/catppuccin.conf"
source-file "~/.config/tmux/themes/catppuccin/mocha.conf"

# if-shell "[ -z \"$TMUX_MINIMAL\" ]" {
  set -g status on
# } {
  # set -g status off
  # set-hook -g after-new-window      'if "[ #{session_windows} -gt 1 ]" "set status on"'
  # set-hook -g after-kill-pane       'if "[ #{session_windows} -lt 2 ]" "set status off"'
  # set-hook -g pane-exited           'if "[ #{session_windows} -lt 2 ]" "set status off"'
  # set-hook -g window-layout-changed 'if "[ #{session_windows} -lt 2 ]" "set status off"'
# }
